#include <iostream>
#include <conio.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#define ARCHPROD "Productos.dat"
#define ARCHVENT "Ventas.dat"
#define ARCHCLIEN "Clientes.dat"
#define ARCHCOMP "Compras.dat"

using namespace std;

struct regProducto{
	int IdProd;
	char nomProd[30];
	int precio;
	int stock;
};
struct regTransaccion{
	int Id;
	char fec[10];
	int cant;
	int IdProd;
	int Idclie;
};
struct regCliente{
	int Idclie;
	char nomClie[30];
	int NIT;
	int desc;
};


void NF(char nombre[])
{
	FILE *ptr;
	ptr=fopen(nombre,"ab");
	fclose(ptr);
}
void actualizarStockV(int I, int numero)
{
	FILE *ptr;
	int b=0;
	regProducto reg;
	ptr=fopen("Productos.dat", "ab");
	fread(&reg, sizeof(reg), 1, ptr);
	rewind(ptr);
	while(feof(ptr)==false || b==0)
	{
		if(I==reg.IdProd)
		{
			reg.stock=reg.stock-numero;
			b=1;
			fwrite(&reg, sizeof(reg), 1, ptr);
		}
	}
}
void actualizarStockC(int I, int numero)
{
	FILE *ptr;
	int b=0;
	regProducto reg;
	ptr=fopen("Productos.dat", "r+b");
	fread(&reg, sizeof(reg), 1, ptr);
	rewind(ptr);
	while(feof(ptr)==false || b==0)
	{
		if(I==reg.IdProd)
		{
			reg.stock=reg.stock+numero;
			b=1;
			fwrite(&reg, sizeof(reg), 1, ptr);
		}
	}
}
bool obtenerDato(int I, int numero)
{
	int b=0;
	FILE *ptr;
	bool k=true;
	regProducto reg;
	ptr=fopen("Productos.dat", "rb");
	fread(&reg, sizeof(reg), 1, ptr);
	while(feof(ptr)==false || b==0)
	{
		if(I==reg.IdProd)
		{
			if(reg.stock<numero)
			{
				k=false;
			}
		}
		fread(&reg, sizeof(reg), 1, ptr);
	}
	return(k);
}
int obtenerPrecio(int I)
{
	FILE *ptr;
	regProducto reg;
	int pri;
	int b=0;
	fopen(ARCHPROD, "rb");
	fread(&reg, sizeof(reg), 1, ptr);
	while(feof(ptr)==false || b==0)
	{
		if(reg.IdProd==I)
		{
			b=1;
			pri=reg.precio;
		}
	}
	return(pri);
}

int totalCompra(int I)
{
	FILE *ptr;
	regTransaccion reg;
	int s=0, a;
	ptr=fopen(ARCHVENT, "rb");
	fread(&reg, sizeof(reg), 1, ptr);
	while(feof(ptr)==false)
	{
		a=obtenerPrecio(reg.IdProd);
		if(reg.Idclie=I)
		{
			s=s+reg.cant*a;
		}
		fread(&reg, sizeof(reg), 1, ptr);
	}
	return(s);
}


int codigoProd(int &x, char na[])
{
	FILE *ptr;
	regProducto reg;
	ptr=fopen(na, "rb");		
	fread(&reg, sizeof(reg), 1, ptr);
	while(x<=reg.IdProd)
	{
		x++;
		fread(&reg, sizeof(reg), 1, ptr);
	}
	fclose(ptr);
	return(x);
}
int codigoVent(int &x, char na[])
{
	FILE *ptr;
	regTransaccion reg;
	ptr=fopen(na, "rb");
	fread(&reg, sizeof(reg), 1, ptr);
	while(x<=reg.Id)
	{
		x++;
	}
	fclose(ptr);
	return(x);
}
int codigoClien(int &x, char na[])
{
	FILE *ptr;
	regCliente reg;
	ptr=fopen(na, "rb");
	fread(&reg, sizeof(reg), 1, ptr);
	while(x<=reg.Idclie)
	{
		x++;
	}
	fclose(ptr);
	return(x);
}


void addProducto(int &cod)
{
	FILE *ptr;
	char resp;
	regProducto reg;
	int b=0;
	ptr=fopen("Productos.dat","ab");
	cod=codigoProd(cod, ARCHPROD);
	while(b!=1)
	{

		cout<< "nombre: ";
		do{
			gets(reg.nomProd);
		}while(strlen(reg.nomProd)==0);
		reg.IdProd=cod;
		cout<<"precio del producto? "<<endl;
		cin>>reg.precio;
		reg.stock=0;
		fwrite(&reg, sizeof(reg), 1, ptr);
		cout<<"desea ingresar mas productos?  S/N"<<endl;
		cin>>resp;
		if(resp!='S' && resp!='s')
		{
			b=1;
		}
		cod++;
	}
	fclose(ptr);
}
void addCliente(int &cod)
{
	FILE *ptr;
	char resp;
	regCliente reg;
	int b=0;
	ptr=fopen("Clientes.dat","ab");
	cod=codigoClien(cod, ARCHCLIEN);
	reg.Idclie=cod;
	cout<< "nombre: ";
	do{
		gets(reg.nomClie);
	}while(strlen(reg.nomClie)==0);
	cout<<"NIT: "<<endl;
	cin>>reg.NIT;
	reg.desc=0;
	fwrite(&reg, sizeof(reg), 1, ptr);
	cod++;
	fclose(ptr);
}
void addVenta(int &cod)
{
	FILE *ptr;
	char resp;
	regTransaccion reg;
	int b=0, cc=0;
	cod=codigoVent(cod, ARCHVENT);
	ptr=fopen("Ventas.dat","ab");
	while(b!=1)
	{
		reg.Id=cod;
		cout<< "fecha DD/MM/AAAA: ";
		do{
			gets(reg.fec);
		}while(strlen(reg.fec)==0);
		cout<<"Cantidad vendida del producto? "<<endl;
		cin>>reg.cant;
		cout<<"Codigo de producto: "<<endl;
		cin>>reg.IdProd;
		cout<<endl;
		addCliente(cc);

		if(obtenerDato(reg.IdProd, reg.cant)==true)
		{
			actualizarStockV(reg.IdProd, reg.cant);
			fwrite(&reg, sizeof(reg), 1, ptr);
		}
		else
		{
			cout<<"No Stock disponible"<<endl;
			getch();
			system("cls");
		}
		cout<<"desea ingresar mas ventas?  S/N"<<endl;
		cin>>resp;
		if(resp!='S' && resp!='s')
		{
			b=1;
		}
		cod++;
	}
	fclose(ptr);
}
void addCompra(int &cod)
{
	FILE *ptr;
	char resp;
	regTransaccion reg;
	int b=0;
	cod=codigoVent(cod, ARCHVENT);
	ptr=fopen("Compras.dat","ab");
	while(b!=1)
	{
		reg.Id=cod;
		cout<< "fecha DD/MM/AAAA: ";
		do{
			gets(reg.fec);
		}while(strlen(reg.fec)==0);
		cout<<"Cantidad comprada del producto? "<<endl;
		cin>>reg.cant;
		cout<<"Codigo de producto: "<<endl;
		cin>>reg.IdProd;
		actualizarStockC(reg.IdProd, reg.cant);
		fwrite(&reg, sizeof(reg), 1, ptr);
		cout<<"desea ingresar mas ventas?  S/N"<<endl;
		cin>>resp;
		if(resp!='S' && resp!='s')
		{
			b=1;
		}
		cod++;
	}
	fclose(ptr);
}


void mostraProd(char nombre[])				
{
	FILE *ptr;
	regProducto reg;
	cout<<"PRODUCTOS"<<endl;
	ptr=fopen(nombre,"rb");
	if(ptr==NULL)
	{
		cout<<"no existe"<<endl;
	}
	else
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while(feof(ptr)==false)
		{
			cout<<reg.IdProd<<"	";
			cout<<reg.nomProd<<"	";
			cout<<reg.precio<<"	";
			cout<<reg.stock<<"	"<<endl;
			fread(&reg, sizeof(reg), 1, ptr);
		}
	}
	fclose(ptr);
	getch();
}
void mostraVenta(char nombre[])				
{
	FILE *ptr;
	regTransaccion reg;
	cout<<"VENTAS"<<endl;
	ptr=fopen(nombre,"rb");
	if(ptr==NULL)
	{
		cout<<"no existe"<<endl;
	}
	else
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while(feof(ptr)==false)
		{
			cout<<reg.Id<<"	";
			cout<<reg.fec<<"	";
			cout<<reg.cant<<"	";
			cout<<reg.IdProd<<"	";
			cout<<reg.Idclie<<"	"<<endl;
			fread(&reg, sizeof(reg), 1, ptr);
		}
	}
	fclose(ptr);
	getch();
}
void mostraCompra(char nombre[])				
{
	FILE *ptr;
	regTransaccion reg;
	cout<<"COMPRAS"<<endl;
	ptr=fopen(nombre,"rb");
	if(ptr==NULL)
	{
		cout<<"no existe"<<endl;
	}
	else
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while(feof(ptr)==false)
		{
			cout<<reg.Id<<"	";
			cout<<reg.fec<<"	";
			cout<<reg.cant<<"	";
			cout<<reg.IdProd<<"	"<<endl;
			fread(&reg, sizeof(reg), 1, ptr);
		}
	}
	fclose(ptr);
	getch();
}
void mostraCliente(char nombre[])				
{
	FILE *ptr;
	regCliente reg;
	cout<<"CLIENTES"<<endl;
	ptr=fopen(nombre,"rb");
	if(ptr==NULL)
	{
		cout<<"no existe"<<endl;
	}
	else
	{
		fread(&reg, sizeof(reg), 1, ptr);
		while(feof(ptr)==false)
		{
			cout<<reg.Idclie<<"	";
			cout<<reg.nomClie<<"	";
			cout<<reg.NIT<<"	"<<endl;
			fread(&reg, sizeof(reg), 1, ptr);
		}
	}
	fclose(ptr);
	getch();
}

void descuento()
{
	FILE *ptr;
	regCliente reg;
	ptr=fopen(ARCHCLIEN, "ab");
	fread(&reg, sizeof(reg), 1, ptr);
	rewind(ptr);
	while(feof(ptr)==false)
	{
		if(totalCompra(reg.Idclie)<=1000)
		{
			reg.desc=0;
		}
		if(totalCompra(reg.Idclie)<=2000 && totalCompra(reg.Idclie)>1000)
		{
			reg.desc=10;
		}
		if(totalCompra(reg.Idclie)<=3000 && totalCompra(reg.Idclie)>2000)
		{
			reg.desc=15;
		}
		if(totalCompra(reg.Idclie)>3000)
		{
			reg.desc=20;
		}
		fwrite(&reg, sizeof(reg), 1, ptr);
	}
}

void main()
{
	int cp=10000, cv=20160000, cco=999900;
	NF(ARCHPROD);
	NF(ARCHVENT);
	NF(ARCHCLIEN);
	NF(ARCHCOMP);
	int opcion;
	do{
		cout<<"			MENU PRINCIPAL			"<<endl;
		cout<<"			1. Añadir productos			"<<endl;
		cout<<"			2. Añadir Compras			"<<endl;
		cout<<"			3. Añadir Ventas			"<<endl;
		cout<<"			4. Listado de productos			"<<endl;
		cout<<"			5. Listado de Ventas			"<<endl;
		cout<<"			6. Listado de Compras			"<<endl;
		cout<<"			7. Calcular descuento			"<<endl;
		cout<<"			8. Listado de clientes			"<<endl;
		cout<<"			0. Salir			"<<endl;
		cout<<"			digite la opcion deseada: ";
		cin>> opcion;
		switch(opcion)
		{
		case 1:
			addProducto(cp);
			mostraProd(ARCHPROD);
			break;
		case 2:
			mostraProd(ARCHPROD);
			addCompra(cco);
			break;
		case 3:
			mostraProd(ARCHPROD);
			addVenta(cv);
			break;
		case 4:
			mostraProd(ARCHPROD);
			break;
		case 5:
			mostraVenta(ARCHVENT);
			break;
		case 6:
			mostraCompra(ARCHVENT);
			break;
		case 7:
			descuento();
			break;
		case 8:
			mostraCliente(ARCHVENT);
			break;
		case 0:
			cout<<"SALIR";
			break;
		default:
			cout<<"opcion incorrecta";
			break;
		}
	}while(opcion!=0);
	getch();
}
