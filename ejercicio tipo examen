#include <iostream>
#include <conio.h>
#define M 10

using namespace std;
struct MatVec{
	int msv[10];
};
struct VecdVec{
	int ns;
	int sv[10];
};

void llenar_mat_de_vec(MatVec m[M][M] , int x , int y);
void mostrar_mat_de_vec(MatVec m[M][M] , int x , int y);
void llenar_vecdvec_primo(MatVec m[M][M] , int x , int y , VecdVec V[]);
void mostrar(VecdVec V[], int tam);
bool primo(int x);
void main()
{
	MatVec M1[M][M];
	VecdVec V1[M];
	int fil, col;
	cout<<"numero de filas y columnas"<<endl;
	cin>>fil;
	col=fil;
	llenar_mat_de_vec(M1, fil, col);
	mostrar_mat_de_vec(M1, fil, col);
	llenar_vecdvec_primo(M1, fil, col, V1);
	mostrar(V1, fil);
	getch();
}

void llenar_mat_de_vec(MatVec m[M][M], int x, int y)
{
	int i, j, k, c=0;
	for(i=0; i<x; i++)
	{
		for(j=0; j<y; j++)
		{
			for(k=0; k<x; k++)
			{
				m[i][j].msv[k]=++c;
			}
		}
	}
}
void mostrar_mat_de_vec(MatVec m[M][M], int x, int y)
{
	int i, j, k;
	for(i=0; i<x; i++)
	{
		for(j=0; j<y; j++)
		{
			for(k=0; k<x; k++)
			{
				cout<<m[i][j].msv[k]<<"  ";
			}
			cout<<"	|| ";
		}
		cout<<endl;
	}
}
void llenar_vecdvec_primo(MatVec m[M][M] , int x , int y , VecdVec V[])
{
	int i, j, k;
	for(i=0; i<x; i++)
	{
		V[i].ns=0;
		for(j=0; j<y; j++)
		{
			for(k=0; k<x; k++)
			{
				if(primo(m[i][j].msv[k])==true)
				{
					V[i].sv[V[i].ns]= m[i][j].msv[k];
					V[i].ns++;
				}
			}
		}
	}
}
void mostrar(VecdVec V[], int tam)
{
	for(int i=0; i<tam; i++)
	{
		for(int j=0; j<V[i].ns; j++)
		{
			cout<< V[i].sv[j] <<"	";
		}
		cout<<endl;
	}
}
bool primo(int x)
{
	int d, i=1, c=0;
	bool k=true;			
	while (i<x)
	{
		d=x%i;
		if(d==0)
			c=c+1;
		i=i+1;
	}
	if(c>=2)
		k=false;
	return (k);
}
